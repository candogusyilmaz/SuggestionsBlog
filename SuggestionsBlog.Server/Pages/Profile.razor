@page "/profile"
@attribute [Authorize]
@inject ISuggestionService sugService
@inject IUserService userService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage" class="button is-danger">Close</button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="/MicrosoftIdentity/Account/EditProfile">Edit My Profile</a>
    </p>
</div>

@if (_approvedSubmissions?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <hr />
        @foreach (var item in _approvedSubmissions)
        {
            <SuggestionCardComponent Suggestion="item" />
            <br />
        }
    </div>
}

@if (_archivedSubmissions?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <hr />
        @foreach (var item in _archivedSubmissions)
        {
            <SuggestionCardComponent Suggestion="item" />
            <br />
        }
    </div>
}

@if (_pendingSubmissions?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <hr />
        @foreach (var item in _pendingSubmissions)
        {
            <SuggestionCardComponent Suggestion="item" />
            <br />
        }
    </div>
}

@if (_rejectedSubmissions?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <hr />
        @foreach (var item in _rejectedSubmissions)
        {
            <SuggestionCardComponent Suggestion="item" />
            <br />
        }
    </div>
}



@code {
    private User _loggedInUser;
    private List<Suggestion> _submissions;
    private List<Suggestion> _approvedSubmissions;
    private List<Suggestion> _archivedSubmissions;
    private List<Suggestion> _pendingSubmissions;
    private List<Suggestion> _rejectedSubmissions;

    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await authProvider.GetUser(userService);
        _submissions = (await sugService.GetSuggestionsByUserId(_loggedInUser.Id)).OrderByDescending(x => x.DateCreated).ToList();

        if (_submissions is null)
            return;

        _approvedSubmissions = _submissions.Where(x => x.ApprovedForRelease && !x.Archived && !x.Rejected).ToList();
        _archivedSubmissions = _submissions.Where(x => x.Archived && !x.Rejected).ToList();
        _pendingSubmissions = _submissions.Where(x => !x.ApprovedForRelease && !x.Archived && !x.Rejected).ToList();
        _rejectedSubmissions = _submissions.Where(x => x.Rejected).ToList();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
